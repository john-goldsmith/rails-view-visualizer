#!/usr/bin/env ruby

require 'thor'

class RailsViewVisualizer < Thor

  RENDER_REGEX = /render[\s\(][:partial:\s=>\s]*["'][\w\/]*["']\)?/i

  default_command :start

  desc "visualize", "Default task"
  option :outputdir,
    aliases: :d,
    default: "./doc/rails_view_visualizer/", # TODO: Check for trailing forward slash if not using default
    type: :string,
    desc: "Specify the output directory."
  option :outputfile,
    aliases: :f,
    default: "index.html", # TODO: Separate file name and file extension; insert timestamp
    type: :string,
    desc: "Specify the output filename."
  option :inputdir,
    aliases: :i,
    default: "./app/views/",
    type: :string,
    desc: "Specify the Rails view directory."
  option :extension,
    aliases: :e,
    default: "*.html.*",
    type: :string,
    desc: "Specify the file extension to search for."
  def start
    files.each do |file|
      append_html "<ul>"
      f = File.open(file).read
      renders_in_file(f).each do |render|
        append_html "<li>"
        append_html render.path
        append_html "</li>"
      end
      append_html "</ul>"
    end
    write_output_file
  end

  private

    def renders_in_file(file)
      file.scan(RENDER_REGEX).map { |render| Render.new(render) }
    end

    def files
      @files = Dir.glob("#{options[:inputdir]}/**/#{options[:extension]}")
    end

    def append_html(html)
      @html ||= []
      @html << html
    end

    def html_output
      html_header = [
        "<!DOCTYPE html>",
        "<html>",
          "<head>",
          "</head>",
          "<body>"
      ]
      html_footer = [
          "</body>",
        "</html>"
      ]
      @html.unshift html_header
      @html.concat html_footer
      @html.flatten.join
    end

    def write_output_file
      # output_file = "#{options[:outputfile]}_#{Time.now}#{output_file_extension}"
      File.open("#{options[:outputdir]}#{options[:outputfile]}", 'w') do |f|
        f.write html_output
      end
    end

end

class Render

  VIEW_PATH_REGEX = /["'][\w\/]+["']/
  PARTIAL_REGEX = /:partial|partial:/
  LOCALS_REGEX = /:locals|locals:/

  def initialize(render)
    @render = render
  end

  def path
    @render.match(VIEW_PATH_REGEX)[0]
  end

  def file
  end

  def is_partial?
    !@render.scan(PARTIAL_REGEX).empty?
  end

  def is_view?
    @render.scan(PARTIAL_REGEX).empty?
  end

  def has_locals?
    !@render.scan(PARTIAL_REGEX).empty?
  end

  def locals
    @render.scan(PARTIAL_REGEX)
    locals.eval
  end

end

RailsViewVisualizer.start(ARGV)