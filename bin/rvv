#!/usr/bin/env ruby

require 'thor'

class RailsViewVisualizer < Thor

  RENDER_REGEX = /render[\s\(][:partial=>\s]*["'][\w\/]*["'][,:locals=>\s\{]*[\w\s=>"',:]*[\}\)]*/i

  default_command :start

  desc "visualize", "Default task"
  option :outputdir,
    aliases: :d,
    default: "./doc/rails_view_visualizer/", # TODO: Check for trailing forward slash if not using default
    type: :string,
    desc: "Specify the output directory."
  option :outputfile,
    aliases: :f,
    default: "index.html", # TODO: Separate file name and file extension; insert timestamp
    type: :string,
    desc: "Specify the output filename."
  option :inputdir,
    aliases: :i,
    default: "./app/views/",
    type: :string,
    desc: "Specify the Rails view directory."
  option :extension,
    aliases: :e,
    default: "*.html.*",
    type: :string,
    desc: "Specify the file extension to search for."
  def start
    files.each do |file|
      append_html '<ul class="file">'
      puts "Parsing #{file}..."
      f = File.open(file).read
      append_html '<li class="file-name">'
      append_html "<a href=\"#{File.basename(file)}\">#{File.basename(file)}</a>"
      append_html "</li>"
      renders_in_file(f).each do |render|
        append_html '<li class="file-render">'
        append_html render.path_and_file
        append_html "</li>"
      end
      append_html "</ul>"
    end
    write_output_file
  end

  private

    def renders_in_file(file)
      file.scan(RENDER_REGEX).map { |render| Render.new(render) }
    end

    def files
      @files ||= Dir.glob("#{options[:inputdir]}/**/#{options[:extension]}")
    end

    def append_html(html)
      @html ||= []
      @html << html
    end

    def html_output
      html_header = [
        "<!DOCTYPE html>",
        "<html>",
          "<head>",
          "<link rel=\"stylesheet\" href=\"rails_view_visualizer.css\"",
          "</head>",
          "<body>"
      ]
      html_footer = [
          "</body>",
        "</html>"
      ]
      @html.unshift html_header
      @html.concat html_footer
      @html.flatten.join
    end

    def write_output_file
      puts "Writing file..."
      # output_file = "#{options[:outputfile]}_#{Time.now}#{output_file_extension}"
      File.open("#{options[:outputdir]}#{options[:outputfile]}", 'w') do |f|
        f.write html_output
      end
      puts "Done!"
    end

end

class Render

  PATH_AND_FILE_REGEX = /["'][\w\/]+["']/
  PARTIAL_REGEX = /:partial|partial:/
  LOCALS_REGEX = /:?locals:?\s?=?>?\s?\{[\s\:\w\d=>"',]*\}/i
  LOCALS_HASH_REGEX = /\{[\s\:\w\d=>"',]*\}/i

  def initialize(render)
    @render = render
  end

  def path_and_file
    @render.match(PATH_AND_FILE_REGEX).to_s.gsub!(/["']/, '')
  end

  def path
    path_and_file.split("/")[0..-2].join("/")
  end

  def file
    path_and_file.split("/").last
  end

  def is_partial?
    @render.match(PARTIAL_REGEX).nil? ? false : true
  end

  def is_view?
    @render.match(PARTIAL_REGEX).nil? ? true : false
  end

  def has_locals?
    @render.match(LOCALS_REGEX).nil? ? false : true
  end

  def locals
    local_vars = @render.match(LOCALS_REGEX) # The entire "locals: {...}" portion"
    eval(local_vars.to_s.match(LOCALS_HASH_REGEX).to_s) unless local_vars.nil? # Just the "{...}" portion returned as a hash
  end

end

RailsViewVisualizer.start(ARGV)